# %% --- FMD Parameters ---
M_PBAR = 1836.152672  # Antiproton mass (a.u.)
M_ELECTRON = 1.0      # Electron mass (a.u.)

ALPHA = 5.0             # Hardness parameter (assuming same for all Heisenberg/Pauli)
XI_H_BASE = 1.000       # Base for electron-nucleus & pbar-nucleus Heisenberg
XI_P_BASE = 2.767       # Base for electron-electron Pauli

# Scaled XI parameters
XI_H = XI_H_BASE / (1 + 1 / (2 * ALPHA))**0.5
XI_P = XI_P_BASE / (1 + 1 / (2 * ALPHA))**0.5

print(f"Constants loaded: ALPHA={ALPHA:.1f}, XI_H={XI_H:.3f}, XI_P={XI_P:.3f}")

# --- Simulation Parameters for a SINGLE Trajectory ---
# Initial Antiproton Conditions
E0_PBAR = 0.5           # Initial kinetic energy of antiproton (a.u.)
XPBAR_INIT = 15.0       # Initial -x distance of antiproton from origin (a.u.)
BB_PBAR = 0.5           # Impact parameter for antiproton (a.u.)
# BB_PBAR_ANGLE = 0.0   # Angle for impact parameter in yz-plane (rad), 0 means offset in +y

T_MAX_SIM = 50000.0     # Maximum simulation time if capture doesn't occur (a.u.)

# --- Atom Configuration ---
# Path to the ground state CSV file for the target atom (e.g., Helium)
ATOM_GS_CSV_PATH = 'GS_alpha_HPC/02_He_02e.csv' # MODIFY AS NEEDED

# --- Capture Definition Parameters ---
# Define what "capture" means. This is crucial and model-dependent.
# Example: Antiproton energy relative to nucleus becomes negative.
# More robust: Antiproton forms a bound state with nucleus, possibly with some electrons.
# For simplicity here, let's use a distance criterion and negative energy.
CAPTURE_DISTANCE_THRESHOLD = 2.0 # If pbar gets closer than this to nucleus AND energy is negative
                                 # This is a simple proxy; a true energy check is better.
CAPTURE_ENERGY_THRESHOLD = 0.0   # Antiproton energy relative to nucleus (KE_pbar + V_pbar_N + V_pbar_Es)

# %% --- Output ---
# Directory to save the detailed trajectory data
OUTPUT_DIR_SINGLE_TRAJ = 'single_capture_trajectories'
OUTPUT_FILENAME_PREFIX = 'captured_traj'

# --- Directory and File Naming ---
# This should point to the directory where your trajectory_example_E0_...csv files are stored
# (As generated by your v3_ccs_run.py)
# Example: if your v3_ccs_run.py saves to 'results_pbar_capture/'
BASE_RESULTS_DIR = 'results_pbar_capture' 

# Specific file to analyze (you might make this an argument or loop over files)
# Example for a specific energy and initial pbar position R0 (XPBAR)
E0_VALUE = 1.0 # Example energy
R0_PBAR_VALUE = 10.0 # Example initial pbar distance XPBAR
TRAJECTORY_CSV_FILENAME = f'trajectory_example_E0_{E0_VALUE:.3f}_R0_{R0_PBAR_VALUE:.1f}.csv'

# Output directory for plots generated by v0_trajectory_plots.py
PLOT_OUTPUT_DIR_PREFIX = 'PBAR_TRAJ_PLOTS'

# --- Plot Control Flags ---
PLOT_ALL_RADII = True         # Plot r_p(t), r_e1(t), r_e2(t), ...
PLOT_PBAR_VS_ELECTRONS_2D = True # Plot pbar and electron XY trajectories
PLOT_PBAR_VS_ELECTRONS_3D = True # Plot pbar and electron 3D trajectories
PLOT_ANIMATION_2D = True      # Create a 2D animation
PLOT_ANIMATION_3D = False     # Create a 3D animation (can be slow)
# Add flags for energy plotting if you intend to re-calculate/analyze energy from r,p data later
# For now, focusing on plotting from the provided CSV format (time, r_p, r_e1, ...)

# --- Animation Parameters ---
ANIMATION_FPS = 30
ANIMATION_FRAME_SKIP = 10 # Plot every Nth frame from the CSV data for smoother/faster animation